version: '3.8'

services:
  app_blue:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    # uvicorn config:
    # - 8 uvicorn workers for parallelism (one per CPU core)
    # - uvloop for high-performance async I/O
    # - Handles ~5000 concurrent WebSocket connections per worker (I/O bound).
    #   Actual concurrency limited by memory, not CPU
    command: >
      uvicorn app.asgi:application
      --host 0.0.0.0
      --port 8000
      --workers 8
      --loop uvloop
    container_name: app_blue
    ports:
      - "${APP_BLUE_PORT}:8000"
    networks:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 2s
      retries: 3
    
  app_green:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    # uvicorn config:
    # - 8 uvicorn workers for parallelism (one per CPU core)
    # - uvloop for high-performance async I/O
    # - Handles ~5000 concurrent WebSocket connections per worker (I/O bound).
    #   Actual concurrency limited by memory, not CPU
    command: >
      uvicorn app.asgi:application
      --host 0.0.0.0
      --port 8000
      --workers 8
      --loop uvloop
    container_name: app_green
    ports:
      - "${APP_GREEN_PORT}:8000"
    networks:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 2s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ../devops/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - app_blue
      - app_green
    networks:
      - web

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ../devops/grafana/dashboards:/etc/grafana/dashboards
      - ../devops/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - web

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ../devops/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - web

networks:
  web:
    driver: bridge
